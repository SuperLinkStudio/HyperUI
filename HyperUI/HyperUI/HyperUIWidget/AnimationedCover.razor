@namespace HyperUIWidget

<div class="animationed-cover @(CilpPathAnimationDirectionDefault.GetAnimationDefaultClassFromDirection(WidgetAnimationDirection)) @(stateClassFlag)">
    <div class="cover-layer @(CilpPathAnimationDirectionDefault.GetAnimationDefaultClassFromDirection(CoverAnimationDirection)) @(IsHighlightCover ? "highlight child-highlight" : null)">
        @(CoverContent)
    </div>
    <div>
        @(ChildContent)
    </div>
</div>

@code {
    /// <summary>
    /// 子组件
    /// </summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// 遮罩的子组件
    /// </summary>
    [Parameter] public RenderFragment? CoverContent { get; set; }

    /// <summary>
    /// 组件的CilpPath动画方向
    /// </summary>
    [Parameter] public CilpPathAnimationDirectionDefault.DirectionDefault WidgetAnimationDirection { get; set; } = CilpPathAnimationDirectionDefault.DirectionDefault.FromLeft;

    /// <summary>
    /// 遮罩的CilpPath动画方向
    /// </summary>
    [Parameter] public CilpPathAnimationDirectionDefault.DirectionDefault CoverAnimationDirection { get; set; } = CilpPathAnimationDirectionDefault.DirectionDefault.ToRight;

    /// <summary>
    /// 是否高亮Cover
    /// </summary>
    [Parameter] public bool IsHighlightCover { get; set; }

    /// <summary>
    /// 是否在ParametersSet时自动显示
    /// </summary>
    [Parameter] public bool IsAutoOpen { get; set; } = true;

    string? stateClassFlag = null;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (IsAutoOpen)
        {
            Show();
        }
    }

    /// <summary>
    /// 显示
    /// </summary>
    public void Show() => stateClassFlag = "show";

    /// <summary>
    /// 隐藏
    /// </summary>
    public void Hide() => stateClassFlag = "hide";
}
